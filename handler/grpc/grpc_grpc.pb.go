// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenericDataServiceClient is the client API for GenericDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenericDataServiceClient interface {
	GetKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Data, error)
	SetKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Response, error)
	DeleteKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error)
}

type genericDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenericDataServiceClient(cc grpc.ClientConnInterface) GenericDataServiceClient {
	return &genericDataServiceClient{cc}
}

func (c *genericDataServiceClient) GetKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/GenericDataService/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericDataServiceClient) SetKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GenericDataService/SetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericDataServiceClient) DeleteKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GenericDataService/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenericDataServiceServer is the server API for GenericDataService service.
// All implementations must embed UnimplementedGenericDataServiceServer
// for forward compatibility
type GenericDataServiceServer interface {
	GetKey(context.Context, *Key) (*Data, error)
	SetKey(context.Context, *Data) (*Response, error)
	DeleteKey(context.Context, *Key) (*Response, error)
	mustEmbedUnimplementedGenericDataServiceServer()
}

// UnimplementedGenericDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenericDataServiceServer struct {
}

func (UnimplementedGenericDataServiceServer) GetKey(context.Context, *Key) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedGenericDataServiceServer) SetKey(context.Context, *Data) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (UnimplementedGenericDataServiceServer) DeleteKey(context.Context, *Key) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedGenericDataServiceServer) mustEmbedUnimplementedGenericDataServiceServer() {}

// UnsafeGenericDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenericDataServiceServer will
// result in compilation errors.
type UnsafeGenericDataServiceServer interface {
	mustEmbedUnimplementedGenericDataServiceServer()
}

func RegisterGenericDataServiceServer(s grpc.ServiceRegistrar, srv GenericDataServiceServer) {
	s.RegisterService(&GenericDataService_ServiceDesc, srv)
}

func _GenericDataService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericDataServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GenericDataService/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericDataServiceServer).GetKey(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericDataService_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericDataServiceServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GenericDataService/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericDataServiceServer).SetKey(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericDataService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericDataServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GenericDataService/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericDataServiceServer).DeleteKey(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// GenericDataService_ServiceDesc is the grpc.ServiceDesc for GenericDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenericDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GenericDataService",
	HandlerType: (*GenericDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _GenericDataService_GetKey_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _GenericDataService_SetKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _GenericDataService_DeleteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
